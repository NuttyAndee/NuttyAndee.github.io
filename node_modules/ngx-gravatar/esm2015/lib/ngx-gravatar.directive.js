/* eslint-disable @angular-eslint/directive-selector */
import { Directive, ElementRef, Input, Renderer2, } from '@angular/core';
import { NgxGravatarService } from './ngx-gravatar.service';
export class NgxGravatarDirective {
    constructor(elementRef, renderer, gravatarService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.gravatarService = gravatarService;
        this.style = {};
        this.initialized = false;
        this.defaultConfig = this.gravatarService.getDefaultConfig();
        // Listen for error when fetching custom src
        this.renderer.listen(this.elementRef.nativeElement, 'error', (event) => {
            if (!this.isGravatarUsed) {
                this.initializeAvatar(true); // Force using gravatar
            }
        });
    }
    ngOnInit() {
        this.initializeAvatar();
        this.initialized = true;
        this.isGravatarUsed = false;
    }
    ngOnChanges() {
        if (this.initialized) {
            this.initializeAvatar();
        }
    }
    /**
     * Set default values for user inputs if they are not provided
     */
    setDefaultValues() {
        this.size = this.computeSize();
        this.ratio =
            this.ratio === undefined ? this.defaultConfig.ratio : this.ratio;
        this.requestedSize = this.size * this.ratio;
        this.round =
            this.round === undefined ? this.defaultConfig.round : this.round;
        this.cornerRadius =
            this.cornerRadius === undefined
                ? this.defaultConfig.cornerRadius
                : this.cornerRadius;
        this.preferGravatar =
            this.preferGravatar === undefined
                ? this.defaultConfig.preferGravatar
                : this.preferGravatar;
    }
    /**
     * Initialize avatar.
     * Custom source has higher priority if preferGravatar is not set on.
     * Finally, set styles for the avatar.
     */
    initializeAvatar(forcedGravatar) {
        this.setDefaultValues();
        let url = '';
        if (this.preferGravatar || forcedGravatar) {
            url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);
            this.isGravatarUsed = true;
        }
        else {
            // this.preferGravatar == false
            if (this.src) {
                url = this.src;
            }
            else {
                // fallback to gravatar
                url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);
                this.isGravatarUsed = true;
            }
        }
        this.renderer.setProperty(this.elementRef.nativeElement, 'src', url);
        this.setStyle(this.avatarStyle());
    }
    /**
     * Compute the size of the avatar
     *
     * @return size
     */
    computeSize() {
        let size = this.size === undefined ? this.defaultConfig.size : this.size;
        if (this.style && this.style.width) {
            try {
                const width = this.style.width.trim();
                if (width.match(/^\d+px$/)) {
                    // width with px unit
                    size = width.replace('px', '');
                }
            }
            catch (e) {
                return size;
            }
        }
        return size;
    }
    /**
     * Compute style object
     *
     * @return style object
     */
    avatarStyle() {
        const style = {
            width: this.size + 'px',
            height: this.size + 'px',
            borderRadius: this.round
                ? this.defaultConfig.borderRadius
                : this.cornerRadius + 'px',
            borderStyle: this.defaultConfig.hasBorder || this.borderColor || this.borderWidth
                ? this.defaultConfig.borderStyle
                : 'none',
            borderColor: this.borderColor
                ? this.borderColor
                : this.defaultConfig.borderColor,
            borderWidth: this.borderWidth
                ? this.borderWidth + 'px'
                : this.defaultConfig.borderWidth + 'px',
            backgroundColor: this.backgroundColor
                ? this.backgroundColor
                : this.defaultConfig.backgroundColor,
        };
        return Object.assign(Object.assign({}, style), this.style);
    }
    /**
     * Set style for the avatar
     *
     * @param styles style object
     */
    setStyle(styles) {
        Object.keys(styles).forEach((key) => {
            this.renderer.setStyle(this.elementRef.nativeElement, key, styles[key]);
        });
    }
}
NgxGravatarDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngx-gravatar], [ngxGravatar]',
            },] }
];
NgxGravatarDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgxGravatarService }
];
NgxGravatarDirective.propDecorators = {
    src: [{ type: Input }],
    email: [{ type: Input }],
    md5Hash: [{ type: Input }],
    size: [{ type: Input }],
    fallback: [{ type: Input }],
    rating: [{ type: Input }],
    round: [{ type: Input }],
    cornerRadius: [{ type: Input }],
    borderColor: [{ type: Input }],
    borderWidth: [{ type: Input }],
    style: [{ type: Input }],
    preferGravatar: [{ type: Input }],
    backgroundColor: [{ type: Input }],
    ratio: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,