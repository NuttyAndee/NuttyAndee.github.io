{"version":3,"sources":["../../../projects/ngx-gravatar/src/lib/ngx-gravatar.enums.ts","../../../projects/ngx-gravatar/src/lib/gravatar-config.token.ts","../../../projects/ngx-gravatar/src/lib/ngx-gravatar.constants.ts","../../../projects/ngx-gravatar/src/lib/ngx-gravatar.service.ts","../../../projects/ngx-gravatar/src/lib/ngx-gravatar.directive.ts","../../../projects/ngx-gravatar/src/lib/gravatar.module.ts"],"names":["FALLBACK","RATING","GRAVATAR_CONFIG_TOKEN","InjectionToken","DEFAULT_CONFIG","fallback","retro","size","cornerRadius","preferGravatar","hasBorder","borderColor","borderRadius","borderStyle","borderWidth","round","backgroundColor","rating","g","ratio","NgxGravatarService","gravatarConfig","this","defaultConfig","Object","assign","prototype","getDefaultConfig","generateGravatarUrl","email","md5Hash","emailHash","trim","toLowerCase","e","console","error","Md5","hashStr","Injectable","args","providedIn","Optional","type","Inject","NgxGravatarDirective","elementRef","renderer","gravatarService","_this","style","initialized","listen","nativeElement","event","isGravatarUsed","initializeAvatar","ngOnInit","ngOnChanges","setDefaultValues","computeSize","undefined","requestedSize","forcedGravatar","url","src","setProperty","setStyle","avatarStyle","width","match","replace","height","styles","keys","forEach","key","Directive","selector","ElementRef","Renderer2","Input","GravatarModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["// Visit https://en.gravatar.com/site/implement/images for more information\nexport enum FALLBACK {\n  blank = 'blank',\n  identicon = 'identicon',\n  mm = 'mm', // changed to 'mp', visit Gravatar official site for more details\n  mp = 'mp',\n  monsterid = 'monsterid',\n  retro = 'retro',\n  robohash = 'robohash',\n  wavatar = 'wavatar',\n}\n\nexport enum RATING {\n  g = 'g',\n  pg = 'pg',\n  r = 'r',\n  x = 'x',\n}\n\nexport type FallbackType = keyof typeof FALLBACK;\n\nexport type RatingType = keyof typeof RATING;\n","import { InjectionToken } from '@angular/core';\nimport { GravatarConfig } from './gravatar-config';\n\n/**\n * Injection token for gravatar configuration\n */\nexport const GRAVATAR_CONFIG_TOKEN = new InjectionToken<GravatarConfig>(\n  'gravatarCustom.config'\n);\n","import { GravatarConfig } from './gravatar-config';\nimport { FALLBACK, RATING } from './ngx-gravatar.enums';\n\nexport const DEFAULT_CONFIG: GravatarConfig = {\n  fallback: FALLBACK.retro,\n  size: 40,\n  cornerRadius: 0,\n  preferGravatar: false,\n  hasBorder: false,\n  borderColor: '#000000',\n  borderRadius: '50%',\n  borderStyle: 'solid',\n  borderWidth: 1,\n  round: true,\n  backgroundColor: 'transparent',\n  rating: RATING.g,\n  ratio: 2,\n};\n","import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { Md5 } from 'ts-md5/dist/md5';\nimport { GravatarConfig } from './gravatar-config';\nimport { GRAVATAR_CONFIG_TOKEN } from './gravatar-config.token';\nimport { DEFAULT_CONFIG } from './ngx-gravatar.constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgxGravatarService {\n  private defaultConfig: GravatarConfig;\n\n  constructor(\n    @Optional()\n    @Inject(GRAVATAR_CONFIG_TOKEN)\n    private gravatarConfig: GravatarConfig\n  ) {\n    this.defaultConfig = { ...DEFAULT_CONFIG };\n\n    if (this.gravatarConfig) {\n      this.defaultConfig = { ...this.defaultConfig, ...this.gravatarConfig };\n    }\n  }\n\n  /**\n   * Return defaultConfig object\n   */\n  getDefaultConfig() {\n    return this.defaultConfig;\n  }\n\n  /**\n   * Generate gravatar url\n   *\n   * @param email is a string. If email is not a string, email will be set to empty string \"\" by default\n   * @param md5Hash is a string. If value is given it will take precedence over email.\n   * @param size number\n   * @param rating string\n   * @param fallback string\n   * @return gravatar url\n   */\n  generateGravatarUrl(\n    email: string,\n    md5Hash?: string,\n    size: number = this.defaultConfig.size,\n    rating: string = this.defaultConfig.rating,\n    fallback: string = this.defaultConfig.fallback\n  ) {\n    let emailHash: string | Int32Array;\n    if (md5Hash) {\n      emailHash = md5Hash;\n    } else {\n      try {\n        email = email.trim().toLowerCase();\n      } catch (e) {\n        console.error(\n          `[ngx-gravatar] - Email (${email}) is not a string. Empty string is used as a default email.`\n        );\n        email = '';\n      }\n      emailHash = Md5.hashStr(email);\n    }\n    return `https://www.gravatar.com/avatar/${emailHash}?s=${size}&r=${rating}&d=${fallback}`;\n  }\n}\n","/* eslint-disable @angular-eslint/directive-selector */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport { NgxGravatarService } from './ngx-gravatar.service';\nimport { GravatarConfig } from './gravatar-config';\n\n@Directive({\n  selector: '[ngx-gravatar], [ngxGravatar]',\n})\nexport class NgxGravatarDirective implements OnChanges, OnInit {\n  @Input() src: string;\n  @Input() email: string;\n  @Input() md5Hash: string;\n  @Input() size: number;\n  @Input() fallback: string; // enum: ['blank', 'identicon', 'mm', 'monsterid', 'retro', 'robohash', 'wavatar']\n  @Input() rating: string; // enum: ['g', 'pg', 'r', 'x']\n  @Input() round: boolean;\n  @Input() cornerRadius: number;\n  @Input() borderColor: string;\n  @Input() borderWidth: number;\n  @Input() style: any = {};\n  @Input() preferGravatar: boolean;\n  @Input() backgroundColor: boolean;\n  @Input() ratio: number;\n\n  initialized: boolean;\n  defaultConfig: GravatarConfig;\n  requestedSize: number;\n  isGravatarUsed: boolean;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private gravatarService: NgxGravatarService\n  ) {\n    this.initialized = false;\n    this.defaultConfig = this.gravatarService.getDefaultConfig();\n    // Listen for error when fetching custom src\n    this.renderer.listen(this.elementRef.nativeElement, 'error', (event) => {\n      if (!this.isGravatarUsed) {\n        this.initializeAvatar(true); // Force using gravatar\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.initializeAvatar();\n    this.initialized = true;\n    this.isGravatarUsed = false;\n  }\n\n  ngOnChanges() {\n    if (this.initialized) {\n      this.initializeAvatar();\n    }\n  }\n\n  /**\n   * Set default values for user inputs if they are not provided\n   */\n  private setDefaultValues(): void {\n    this.size = this.computeSize();\n    this.ratio =\n      this.ratio === undefined ? this.defaultConfig.ratio : this.ratio;\n    this.requestedSize = this.size * this.ratio;\n    this.round =\n      this.round === undefined ? this.defaultConfig.round : this.round;\n    this.cornerRadius =\n      this.cornerRadius === undefined\n        ? this.defaultConfig.cornerRadius\n        : this.cornerRadius;\n    this.preferGravatar =\n      this.preferGravatar === undefined\n        ? this.defaultConfig.preferGravatar\n        : this.preferGravatar;\n  }\n\n  /**\n   * Initialize avatar.\n   * Custom source has higher priority if preferGravatar is not set on.\n   * Finally, set styles for the avatar.\n   */\n  private initializeAvatar(forcedGravatar?: boolean): void {\n    this.setDefaultValues();\n    let url = '';\n    if (this.preferGravatar || forcedGravatar) {\n      url = this.gravatarService.generateGravatarUrl(\n        this.email,\n        this.md5Hash,\n        this.requestedSize,\n        this.rating,\n        this.fallback\n      );\n      this.isGravatarUsed = true;\n    } else {\n      // this.preferGravatar == false\n      if (this.src) {\n        url = this.src;\n      } else {\n        // fallback to gravatar\n        url = this.gravatarService.generateGravatarUrl(\n          this.email,\n          this.md5Hash,\n          this.requestedSize,\n          this.rating,\n          this.fallback\n        );\n        this.isGravatarUsed = true;\n      }\n    }\n    this.renderer.setProperty(this.elementRef.nativeElement, 'src', url);\n    this.setStyle(this.avatarStyle());\n  }\n\n  /**\n   * Compute the size of the avatar\n   *\n   * @return size\n   */\n  private computeSize(): number {\n    let size = this.size === undefined ? this.defaultConfig.size : this.size;\n    if (this.style && this.style.width) {\n      try {\n        const width = this.style.width.trim();\n        if (width.match(/^\\d+px$/)) {\n          // width with px unit\n          size = width.replace('px', '');\n        }\n      } catch (e) {\n        return size;\n      }\n    }\n    return size;\n  }\n\n  /**\n   * Compute style object\n   *\n   * @return style object\n   */\n  private avatarStyle() {\n    const style = {\n      width: this.size + 'px',\n      height: this.size + 'px',\n      borderRadius: this.round\n        ? this.defaultConfig.borderRadius\n        : this.cornerRadius + 'px',\n      borderStyle:\n        this.defaultConfig.hasBorder || this.borderColor || this.borderWidth\n          ? this.defaultConfig.borderStyle\n          : 'none',\n      borderColor: this.borderColor\n        ? this.borderColor\n        : this.defaultConfig.borderColor,\n      borderWidth: this.borderWidth\n        ? this.borderWidth + 'px'\n        : this.defaultConfig.borderWidth + 'px',\n      backgroundColor: this.backgroundColor\n        ? this.backgroundColor\n        : this.defaultConfig.backgroundColor,\n    };\n    return { ...style, ...this.style };\n  }\n\n  /**\n   * Set style for the avatar\n   *\n   * @param styles style object\n   */\n  private setStyle(styles: any) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(this.elementRef.nativeElement, key, styles[key]);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { GravatarConfig } from './gravatar-config';\nimport { GRAVATAR_CONFIG_TOKEN } from './gravatar-config.token';\nimport { NgxGravatarDirective } from './ngx-gravatar.directive';\n\n@NgModule({\n  declarations: [NgxGravatarDirective],\n  exports: [NgxGravatarDirective],\n})\nexport class GravatarModule {\n  static forRoot(\n    gravatarConfig: GravatarConfig\n  ): ModuleWithProviders<GravatarModule> {\n    return {\n      ngModule: GravatarModule,\n      providers: [\n        {\n          provide: GRAVATAR_CONFIG_TOKEN,\n          useValue: gravatarConfig,\n        },\n      ],\n    };\n  }\n}\n"]}