(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ts-md5/dist/md5')) :
    typeof define === 'function' && define.amd ? define('ngx-gravatar', ['exports', '@angular/core', 'ts-md5/dist/md5'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-gravatar'] = {}, global.ng.core, global.md5));
}(this, (function (exports, i0, md5) { 'use strict';

    /**
     * Injection token for gravatar configuration
     */
    var GRAVATAR_CONFIG_TOKEN = new i0.InjectionToken('gravatarCustom.config');

    // Visit https://en.gravatar.com/site/implement/images for more information
    (function (FALLBACK) {
        FALLBACK["blank"] = "blank";
        FALLBACK["identicon"] = "identicon";
        FALLBACK["mm"] = "mm";
        FALLBACK["mp"] = "mp";
        FALLBACK["monsterid"] = "monsterid";
        FALLBACK["retro"] = "retro";
        FALLBACK["robohash"] = "robohash";
        FALLBACK["wavatar"] = "wavatar";
    })(exports.FALLBACK || (exports.FALLBACK = {}));
    (function (RATING) {
        RATING["g"] = "g";
        RATING["pg"] = "pg";
        RATING["r"] = "r";
        RATING["x"] = "x";
    })(exports.RATING || (exports.RATING = {}));

    var DEFAULT_CONFIG = {
        fallback: exports.FALLBACK.retro,
        size: 40,
        cornerRadius: 0,
        preferGravatar: false,
        hasBorder: false,
        borderColor: '#000000',
        borderRadius: '50%',
        borderStyle: 'solid',
        borderWidth: 1,
        round: true,
        backgroundColor: 'transparent',
        rating: exports.RATING.g,
        ratio: 2,
    };

    var NgxGravatarService = /** @class */ (function () {
        function NgxGravatarService(gravatarConfig) {
            this.gravatarConfig = gravatarConfig;
            this.defaultConfig = Object.assign({}, DEFAULT_CONFIG);
            if (this.gravatarConfig) {
                this.defaultConfig = Object.assign(Object.assign({}, this.defaultConfig), this.gravatarConfig);
            }
        }
        /**
         * Return defaultConfig object
         */
        NgxGravatarService.prototype.getDefaultConfig = function () {
            return this.defaultConfig;
        };
        /**
         * Generate gravatar url
         *
         * @param email is a string. If email is not a string, email will be set to empty string "" by default
         * @param md5Hash is a string. If value is given it will take precedence over email.
         * @param size number
         * @param rating string
         * @param fallback string
         * @return gravatar url
         */
        NgxGravatarService.prototype.generateGravatarUrl = function (email, md5Hash, size, rating, fallback) {
            if (size === void 0) { size = this.defaultConfig.size; }
            if (rating === void 0) { rating = this.defaultConfig.rating; }
            if (fallback === void 0) { fallback = this.defaultConfig.fallback; }
            var emailHash;
            if (md5Hash) {
                emailHash = md5Hash;
            }
            else {
                try {
                    email = email.trim().toLowerCase();
                }
                catch (e) {
                    console.error("[ngx-gravatar] - Email (" + email + ") is not a string. Empty string is used as a default email.");
                    email = '';
                }
                emailHash = md5.Md5.hashStr(email);
            }
            return "https://www.gravatar.com/avatar/" + emailHash + "?s=" + size + "&r=" + rating + "&d=" + fallback;
        };
        return NgxGravatarService;
    }());
    NgxGravatarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxGravatarService_Factory() { return new NgxGravatarService(i0.ɵɵinject(GRAVATAR_CONFIG_TOKEN, 8)); }, token: NgxGravatarService, providedIn: "root" });
    NgxGravatarService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    NgxGravatarService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [GRAVATAR_CONFIG_TOKEN,] }] }
    ]; };

    /* eslint-disable @angular-eslint/directive-selector */
    var NgxGravatarDirective = /** @class */ (function () {
        function NgxGravatarDirective(elementRef, renderer, gravatarService) {
            var _this = this;
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.gravatarService = gravatarService;
            this.style = {};
            this.initialized = false;
            this.defaultConfig = this.gravatarService.getDefaultConfig();
            // Listen for error when fetching custom src
            this.renderer.listen(this.elementRef.nativeElement, 'error', function (event) {
                if (!_this.isGravatarUsed) {
                    _this.initializeAvatar(true); // Force using gravatar
                }
            });
        }
        NgxGravatarDirective.prototype.ngOnInit = function () {
            this.initializeAvatar();
            this.initialized = true;
            this.isGravatarUsed = false;
        };
        NgxGravatarDirective.prototype.ngOnChanges = function () {
            if (this.initialized) {
                this.initializeAvatar();
            }
        };
        /**
         * Set default values for user inputs if they are not provided
         */
        NgxGravatarDirective.prototype.setDefaultValues = function () {
            this.size = this.computeSize();
            this.ratio =
                this.ratio === undefined ? this.defaultConfig.ratio : this.ratio;
            this.requestedSize = this.size * this.ratio;
            this.round =
                this.round === undefined ? this.defaultConfig.round : this.round;
            this.cornerRadius =
                this.cornerRadius === undefined
                    ? this.defaultConfig.cornerRadius
                    : this.cornerRadius;
            this.preferGravatar =
                this.preferGravatar === undefined
                    ? this.defaultConfig.preferGravatar
                    : this.preferGravatar;
        };
        /**
         * Initialize avatar.
         * Custom source has higher priority if preferGravatar is not set on.
         * Finally, set styles for the avatar.
         */
        NgxGravatarDirective.prototype.initializeAvatar = function (forcedGravatar) {
            this.setDefaultValues();
            var url = '';
            if (this.preferGravatar || forcedGravatar) {
                url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);
                this.isGravatarUsed = true;
            }
            else {
                // this.preferGravatar == false
                if (this.src) {
                    url = this.src;
                }
                else {
                    // fallback to gravatar
                    url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);
                    this.isGravatarUsed = true;
                }
            }
            this.renderer.setProperty(this.elementRef.nativeElement, 'src', url);
            this.setStyle(this.avatarStyle());
        };
        /**
         * Compute the size of the avatar
         *
         * @return size
         */
        NgxGravatarDirective.prototype.computeSize = function () {
            var size = this.size === undefined ? this.defaultConfig.size : this.size;
            if (this.style && this.style.width) {
                try {
                    var width = this.style.width.trim();
                    if (width.match(/^\d+px$/)) {
                        // width with px unit
                        size = width.replace('px', '');
                    }
                }
                catch (e) {
                    return size;
                }
            }
            return size;
        };
        /**
         * Compute style object
         *
         * @return style object
         */
        NgxGravatarDirective.prototype.avatarStyle = function () {
            var style = {
                width: this.size + 'px',
                height: this.size + 'px',
                borderRadius: this.round
                    ? this.defaultConfig.borderRadius
                    : this.cornerRadius + 'px',
                borderStyle: this.defaultConfig.hasBorder || this.borderColor || this.borderWidth
                    ? this.defaultConfig.borderStyle
                    : 'none',
                borderColor: this.borderColor
                    ? this.borderColor
                    : this.defaultConfig.borderColor,
                borderWidth: this.borderWidth
                    ? this.borderWidth + 'px'
                    : this.defaultConfig.borderWidth + 'px',
                backgroundColor: this.backgroundColor
                    ? this.backgroundColor
                    : this.defaultConfig.backgroundColor,
            };
            return Object.assign(Object.assign({}, style), this.style);
        };
        /**
         * Set style for the avatar
         *
         * @param styles style object
         */
        NgxGravatarDirective.prototype.setStyle = function (styles) {
            var _this = this;
            Object.keys(styles).forEach(function (key) {
                _this.renderer.setStyle(_this.elementRef.nativeElement, key, styles[key]);
            });
        };
        return NgxGravatarDirective;
    }());
    NgxGravatarDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[ngx-gravatar], [ngxGravatar]',
                },] }
    ];
    NgxGravatarDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: NgxGravatarService }
    ]; };
    NgxGravatarDirective.propDecorators = {
        src: [{ type: i0.Input }],
        email: [{ type: i0.Input }],
        md5Hash: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        fallback: [{ type: i0.Input }],
        rating: [{ type: i0.Input }],
        round: [{ type: i0.Input }],
        cornerRadius: [{ type: i0.Input }],
        borderColor: [{ type: i0.Input }],
        borderWidth: [{ type: i0.Input }],
        style: [{ type: i0.Input }],
        preferGravatar: [{ type: i0.Input }],
        backgroundColor: [{ type: i0.Input }],
        ratio: [{ type: i0.Input }]
    };

    var GravatarModule = /** @class */ (function () {
        function GravatarModule() {
        }
        GravatarModule.forRoot = function (gravatarConfig) {
            return {
                ngModule: GravatarModule,
                providers: [
                    {
                        provide: GRAVATAR_CONFIG_TOKEN,
                        useValue: gravatarConfig,
                    },
                ],
            };
        };
        return GravatarModule;
    }());
    GravatarModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [NgxGravatarDirective],
                    exports: [NgxGravatarDirective],
                },] }
    ];

    /*
     * Public API Surface of ngx-gravatar
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.GravatarModule = GravatarModule;
    exports.NgxGravatarService = NgxGravatarService;
    exports.ɵa = NgxGravatarDirective;
    exports.ɵb = GRAVATAR_CONFIG_TOKEN;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-gravatar.umd.js.map
