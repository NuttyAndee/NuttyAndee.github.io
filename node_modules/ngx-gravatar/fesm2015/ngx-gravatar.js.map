{"version":3,"file":"ngx-gravatar.js","sources":["../../../projects/ngx-gravatar/src/lib/gravatar-config.token.ts","../../../projects/ngx-gravatar/src/lib/ngx-gravatar.enums.ts","../../../projects/ngx-gravatar/src/lib/ngx-gravatar.constants.ts","../../../projects/ngx-gravatar/src/lib/ngx-gravatar.service.ts","../../../projects/ngx-gravatar/src/lib/ngx-gravatar.directive.ts","../../../projects/ngx-gravatar/src/lib/gravatar.module.ts","../../../projects/ngx-gravatar/src/public-api.ts","../../../projects/ngx-gravatar/src/ngx-gravatar.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { GravatarConfig } from './gravatar-config';\n\n/**\n * Injection token for gravatar configuration\n */\nexport const GRAVATAR_CONFIG_TOKEN = new InjectionToken<GravatarConfig>(\n  'gravatarCustom.config'\n);\n","// Visit https://en.gravatar.com/site/implement/images for more information\nexport enum FALLBACK {\n  blank = 'blank',\n  identicon = 'identicon',\n  mm = 'mm', // changed to 'mp', visit Gravatar official site for more details\n  mp = 'mp',\n  monsterid = 'monsterid',\n  retro = 'retro',\n  robohash = 'robohash',\n  wavatar = 'wavatar',\n}\n\nexport enum RATING {\n  g = 'g',\n  pg = 'pg',\n  r = 'r',\n  x = 'x',\n}\n\nexport type FallbackType = keyof typeof FALLBACK;\n\nexport type RatingType = keyof typeof RATING;\n","import { GravatarConfig } from './gravatar-config';\nimport { FALLBACK, RATING } from './ngx-gravatar.enums';\n\nexport const DEFAULT_CONFIG: GravatarConfig = {\n  fallback: FALLBACK.retro,\n  size: 40,\n  cornerRadius: 0,\n  preferGravatar: false,\n  hasBorder: false,\n  borderColor: '#000000',\n  borderRadius: '50%',\n  borderStyle: 'solid',\n  borderWidth: 1,\n  round: true,\n  backgroundColor: 'transparent',\n  rating: RATING.g,\n  ratio: 2,\n};\n","import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { Md5 } from 'ts-md5/dist/md5';\nimport { GravatarConfig } from './gravatar-config';\nimport { GRAVATAR_CONFIG_TOKEN } from './gravatar-config.token';\nimport { DEFAULT_CONFIG } from './ngx-gravatar.constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgxGravatarService {\n  private defaultConfig: GravatarConfig;\n\n  constructor(\n    @Optional()\n    @Inject(GRAVATAR_CONFIG_TOKEN)\n    private gravatarConfig: GravatarConfig\n  ) {\n    this.defaultConfig = { ...DEFAULT_CONFIG };\n\n    if (this.gravatarConfig) {\n      this.defaultConfig = { ...this.defaultConfig, ...this.gravatarConfig };\n    }\n  }\n\n  /**\n   * Return defaultConfig object\n   */\n  getDefaultConfig() {\n    return this.defaultConfig;\n  }\n\n  /**\n   * Generate gravatar url\n   *\n   * @param email is a string. If email is not a string, email will be set to empty string \"\" by default\n   * @param md5Hash is a string. If value is given it will take precedence over email.\n   * @param size number\n   * @param rating string\n   * @param fallback string\n   * @return gravatar url\n   */\n  generateGravatarUrl(\n    email: string,\n    md5Hash?: string,\n    size: number = this.defaultConfig.size,\n    rating: string = this.defaultConfig.rating,\n    fallback: string = this.defaultConfig.fallback\n  ) {\n    let emailHash: string | Int32Array;\n    if (md5Hash) {\n      emailHash = md5Hash;\n    } else {\n      try {\n        email = email.trim().toLowerCase();\n      } catch (e) {\n        console.error(\n          `[ngx-gravatar] - Email (${email}) is not a string. Empty string is used as a default email.`\n        );\n        email = '';\n      }\n      emailHash = Md5.hashStr(email);\n    }\n    return `https://www.gravatar.com/avatar/${emailHash}?s=${size}&r=${rating}&d=${fallback}`;\n  }\n}\n","/* eslint-disable @angular-eslint/directive-selector */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport { NgxGravatarService } from './ngx-gravatar.service';\nimport { GravatarConfig } from './gravatar-config';\n\n@Directive({\n  selector: '[ngx-gravatar], [ngxGravatar]',\n})\nexport class NgxGravatarDirective implements OnChanges, OnInit {\n  @Input() src: string;\n  @Input() email: string;\n  @Input() md5Hash: string;\n  @Input() size: number;\n  @Input() fallback: string; // enum: ['blank', 'identicon', 'mm', 'monsterid', 'retro', 'robohash', 'wavatar']\n  @Input() rating: string; // enum: ['g', 'pg', 'r', 'x']\n  @Input() round: boolean;\n  @Input() cornerRadius: number;\n  @Input() borderColor: string;\n  @Input() borderWidth: number;\n  @Input() style: any = {};\n  @Input() preferGravatar: boolean;\n  @Input() backgroundColor: boolean;\n  @Input() ratio: number;\n\n  initialized: boolean;\n  defaultConfig: GravatarConfig;\n  requestedSize: number;\n  isGravatarUsed: boolean;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private gravatarService: NgxGravatarService\n  ) {\n    this.initialized = false;\n    this.defaultConfig = this.gravatarService.getDefaultConfig();\n    // Listen for error when fetching custom src\n    this.renderer.listen(this.elementRef.nativeElement, 'error', (event) => {\n      if (!this.isGravatarUsed) {\n        this.initializeAvatar(true); // Force using gravatar\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.initializeAvatar();\n    this.initialized = true;\n    this.isGravatarUsed = false;\n  }\n\n  ngOnChanges() {\n    if (this.initialized) {\n      this.initializeAvatar();\n    }\n  }\n\n  /**\n   * Set default values for user inputs if they are not provided\n   */\n  private setDefaultValues(): void {\n    this.size = this.computeSize();\n    this.ratio =\n      this.ratio === undefined ? this.defaultConfig.ratio : this.ratio;\n    this.requestedSize = this.size * this.ratio;\n    this.round =\n      this.round === undefined ? this.defaultConfig.round : this.round;\n    this.cornerRadius =\n      this.cornerRadius === undefined\n        ? this.defaultConfig.cornerRadius\n        : this.cornerRadius;\n    this.preferGravatar =\n      this.preferGravatar === undefined\n        ? this.defaultConfig.preferGravatar\n        : this.preferGravatar;\n  }\n\n  /**\n   * Initialize avatar.\n   * Custom source has higher priority if preferGravatar is not set on.\n   * Finally, set styles for the avatar.\n   */\n  private initializeAvatar(forcedGravatar?: boolean): void {\n    this.setDefaultValues();\n    let url = '';\n    if (this.preferGravatar || forcedGravatar) {\n      url = this.gravatarService.generateGravatarUrl(\n        this.email,\n        this.md5Hash,\n        this.requestedSize,\n        this.rating,\n        this.fallback\n      );\n      this.isGravatarUsed = true;\n    } else {\n      // this.preferGravatar == false\n      if (this.src) {\n        url = this.src;\n      } else {\n        // fallback to gravatar\n        url = this.gravatarService.generateGravatarUrl(\n          this.email,\n          this.md5Hash,\n          this.requestedSize,\n          this.rating,\n          this.fallback\n        );\n        this.isGravatarUsed = true;\n      }\n    }\n    this.renderer.setProperty(this.elementRef.nativeElement, 'src', url);\n    this.setStyle(this.avatarStyle());\n  }\n\n  /**\n   * Compute the size of the avatar\n   *\n   * @return size\n   */\n  private computeSize(): number {\n    let size = this.size === undefined ? this.defaultConfig.size : this.size;\n    if (this.style && this.style.width) {\n      try {\n        const width = this.style.width.trim();\n        if (width.match(/^\\d+px$/)) {\n          // width with px unit\n          size = width.replace('px', '');\n        }\n      } catch (e) {\n        return size;\n      }\n    }\n    return size;\n  }\n\n  /**\n   * Compute style object\n   *\n   * @return style object\n   */\n  private avatarStyle() {\n    const style = {\n      width: this.size + 'px',\n      height: this.size + 'px',\n      borderRadius: this.round\n        ? this.defaultConfig.borderRadius\n        : this.cornerRadius + 'px',\n      borderStyle:\n        this.defaultConfig.hasBorder || this.borderColor || this.borderWidth\n          ? this.defaultConfig.borderStyle\n          : 'none',\n      borderColor: this.borderColor\n        ? this.borderColor\n        : this.defaultConfig.borderColor,\n      borderWidth: this.borderWidth\n        ? this.borderWidth + 'px'\n        : this.defaultConfig.borderWidth + 'px',\n      backgroundColor: this.backgroundColor\n        ? this.backgroundColor\n        : this.defaultConfig.backgroundColor,\n    };\n    return { ...style, ...this.style };\n  }\n\n  /**\n   * Set style for the avatar\n   *\n   * @param styles style object\n   */\n  private setStyle(styles: any) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(this.elementRef.nativeElement, key, styles[key]);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { GravatarConfig } from './gravatar-config';\nimport { GRAVATAR_CONFIG_TOKEN } from './gravatar-config.token';\nimport { NgxGravatarDirective } from './ngx-gravatar.directive';\n\n@NgModule({\n  declarations: [NgxGravatarDirective],\n  exports: [NgxGravatarDirective],\n})\nexport class GravatarModule {\n  static forRoot(\n    gravatarConfig: GravatarConfig\n  ): ModuleWithProviders<GravatarModule> {\n    return {\n      ngModule: GravatarModule,\n      providers: [\n        {\n          provide: GRAVATAR_CONFIG_TOKEN,\n          useValue: gravatarConfig,\n        },\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-gravatar\n */\n\nexport { GravatarModule } from './lib/gravatar.module';\nexport { GravatarConfig } from './lib/gravatar-config';\nexport { NgxGravatarService } from './lib/ngx-gravatar.service';\nexport { FALLBACK, RATING } from './lib/ngx-gravatar.enums';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {GRAVATAR_CONFIG_TOKEN as Éµb} from './lib/gravatar-config.token';\nexport {NgxGravatarDirective as Éµa} from './lib/ngx-gravatar.directive';"],"names":[],"mappings":"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"}