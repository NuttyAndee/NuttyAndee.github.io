{"ast":null,"code":"import { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject, Directive, ElementRef, Renderer2, Input, NgModule } from '@angular/core';\nimport { Md5 } from 'ts-md5/dist/md5';\n/**\n * Injection token for gravatar configuration\n */\n\nimport * as ɵngcc0 from '@angular/core';\nconst GRAVATAR_CONFIG_TOKEN = new InjectionToken('gravatarCustom.config'); // Visit https://en.gravatar.com/site/implement/images for more information\n\nvar FALLBACK = /*#__PURE__*/(() => {\n  (function (FALLBACK) {\n    FALLBACK[\"blank\"] = \"blank\";\n    FALLBACK[\"identicon\"] = \"identicon\";\n    FALLBACK[\"mm\"] = \"mm\";\n    FALLBACK[\"mp\"] = \"mp\";\n    FALLBACK[\"monsterid\"] = \"monsterid\";\n    FALLBACK[\"retro\"] = \"retro\";\n    FALLBACK[\"robohash\"] = \"robohash\";\n    FALLBACK[\"wavatar\"] = \"wavatar\";\n  })(FALLBACK || (FALLBACK = {}));\n\n  return FALLBACK;\n})();\nvar RATING = /*#__PURE__*/(() => {\n  (function (RATING) {\n    RATING[\"g\"] = \"g\";\n    RATING[\"pg\"] = \"pg\";\n    RATING[\"r\"] = \"r\";\n    RATING[\"x\"] = \"x\";\n  })(RATING || (RATING = {}));\n\n  return RATING;\n})();\nconst DEFAULT_CONFIG = {\n  fallback: FALLBACK.retro,\n  size: 40,\n  cornerRadius: 0,\n  preferGravatar: false,\n  hasBorder: false,\n  borderColor: '#000000',\n  borderRadius: '50%',\n  borderStyle: 'solid',\n  borderWidth: 1,\n  round: true,\n  backgroundColor: 'transparent',\n  rating: RATING.g,\n  ratio: 2\n};\nlet NgxGravatarService = /*#__PURE__*/(() => {\n  class NgxGravatarService {\n    constructor(gravatarConfig) {\n      this.gravatarConfig = gravatarConfig;\n      this.defaultConfig = Object.assign({}, DEFAULT_CONFIG);\n\n      if (this.gravatarConfig) {\n        this.defaultConfig = Object.assign(Object.assign({}, this.defaultConfig), this.gravatarConfig);\n      }\n    }\n    /**\n     * Return defaultConfig object\n     */\n\n\n    getDefaultConfig() {\n      return this.defaultConfig;\n    }\n    /**\n     * Generate gravatar url\n     *\n     * @param email is a string. If email is not a string, email will be set to empty string \"\" by default\n     * @param md5Hash is a string. If value is given it will take precedence over email.\n     * @param size number\n     * @param rating string\n     * @param fallback string\n     * @return gravatar url\n     */\n\n\n    generateGravatarUrl(email, md5Hash, size = this.defaultConfig.size, rating = this.defaultConfig.rating, fallback = this.defaultConfig.fallback) {\n      let emailHash;\n\n      if (md5Hash) {\n        emailHash = md5Hash;\n      } else {\n        try {\n          email = email.trim().toLowerCase();\n        } catch (e) {\n          console.error(`[ngx-gravatar] - Email (${email}) is not a string. Empty string is used as a default email.`);\n          email = '';\n        }\n\n        emailHash = Md5.hashStr(email);\n      }\n\n      return `https://www.gravatar.com/avatar/${emailHash}?s=${size}&r=${rating}&d=${fallback}`;\n    }\n\n  }\n\n  NgxGravatarService.ɵfac = function NgxGravatarService_Factory(t) {\n    return new (t || NgxGravatarService)(ɵngcc0.ɵɵinject(GRAVATAR_CONFIG_TOKEN, 8));\n  };\n\n  NgxGravatarService.ɵprov = ɵɵdefineInjectable({\n    factory: function NgxGravatarService_Factory() {\n      return new NgxGravatarService(ɵɵinject(GRAVATAR_CONFIG_TOKEN, 8));\n    },\n    token: NgxGravatarService,\n    providedIn: \"root\"\n  });\n  return NgxGravatarService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* eslint-disable @angular-eslint/directive-selector */\n\n\nlet NgxGravatarDirective = /*#__PURE__*/(() => {\n  class NgxGravatarDirective {\n    constructor(elementRef, renderer, gravatarService) {\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.gravatarService = gravatarService;\n      this.style = {};\n      this.initialized = false;\n      this.defaultConfig = this.gravatarService.getDefaultConfig(); // Listen for error when fetching custom src\n\n      this.renderer.listen(this.elementRef.nativeElement, 'error', event => {\n        if (!this.isGravatarUsed) {\n          this.initializeAvatar(true); // Force using gravatar\n        }\n      });\n    }\n\n    ngOnInit() {\n      this.initializeAvatar();\n      this.initialized = true;\n      this.isGravatarUsed = false;\n    }\n\n    ngOnChanges() {\n      if (this.initialized) {\n        this.initializeAvatar();\n      }\n    }\n    /**\n     * Set default values for user inputs if they are not provided\n     */\n\n\n    setDefaultValues() {\n      this.size = this.computeSize();\n      this.ratio = this.ratio === undefined ? this.defaultConfig.ratio : this.ratio;\n      this.requestedSize = this.size * this.ratio;\n      this.round = this.round === undefined ? this.defaultConfig.round : this.round;\n      this.cornerRadius = this.cornerRadius === undefined ? this.defaultConfig.cornerRadius : this.cornerRadius;\n      this.preferGravatar = this.preferGravatar === undefined ? this.defaultConfig.preferGravatar : this.preferGravatar;\n    }\n    /**\n     * Initialize avatar.\n     * Custom source has higher priority if preferGravatar is not set on.\n     * Finally, set styles for the avatar.\n     */\n\n\n    initializeAvatar(forcedGravatar) {\n      this.setDefaultValues();\n      let url = '';\n\n      if (this.preferGravatar || forcedGravatar) {\n        url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);\n        this.isGravatarUsed = true;\n      } else {\n        // this.preferGravatar == false\n        if (this.src) {\n          url = this.src;\n        } else {\n          // fallback to gravatar\n          url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);\n          this.isGravatarUsed = true;\n        }\n      }\n\n      this.renderer.setProperty(this.elementRef.nativeElement, 'src', url);\n      this.setStyle(this.avatarStyle());\n    }\n    /**\n     * Compute the size of the avatar\n     *\n     * @return size\n     */\n\n\n    computeSize() {\n      let size = this.size === undefined ? this.defaultConfig.size : this.size;\n\n      if (this.style && this.style.width) {\n        try {\n          const width = this.style.width.trim();\n\n          if (width.match(/^\\d+px$/)) {\n            // width with px unit\n            size = width.replace('px', '');\n          }\n        } catch (e) {\n          return size;\n        }\n      }\n\n      return size;\n    }\n    /**\n     * Compute style object\n     *\n     * @return style object\n     */\n\n\n    avatarStyle() {\n      const style = {\n        width: this.size + 'px',\n        height: this.size + 'px',\n        borderRadius: this.round ? this.defaultConfig.borderRadius : this.cornerRadius + 'px',\n        borderStyle: this.defaultConfig.hasBorder || this.borderColor || this.borderWidth ? this.defaultConfig.borderStyle : 'none',\n        borderColor: this.borderColor ? this.borderColor : this.defaultConfig.borderColor,\n        borderWidth: this.borderWidth ? this.borderWidth + 'px' : this.defaultConfig.borderWidth + 'px',\n        backgroundColor: this.backgroundColor ? this.backgroundColor : this.defaultConfig.backgroundColor\n      };\n      return Object.assign(Object.assign({}, style), this.style);\n    }\n    /**\n     * Set style for the avatar\n     *\n     * @param styles style object\n     */\n\n\n    setStyle(styles) {\n      Object.keys(styles).forEach(key => {\n        this.renderer.setStyle(this.elementRef.nativeElement, key, styles[key]);\n      });\n    }\n\n  }\n\n  NgxGravatarDirective.ɵfac = function NgxGravatarDirective_Factory(t) {\n    return new (t || NgxGravatarDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(NgxGravatarService));\n  };\n\n  NgxGravatarDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgxGravatarDirective,\n    selectors: [[\"\", \"ngx-gravatar\", \"\"], [\"\", \"ngxGravatar\", \"\"]],\n    inputs: {\n      style: \"style\",\n      size: \"size\",\n      ratio: \"ratio\",\n      round: \"round\",\n      cornerRadius: \"cornerRadius\",\n      preferGravatar: \"preferGravatar\",\n      src: \"src\",\n      email: \"email\",\n      md5Hash: \"md5Hash\",\n      fallback: \"fallback\",\n      rating: \"rating\",\n      borderColor: \"borderColor\",\n      borderWidth: \"borderWidth\",\n      backgroundColor: \"backgroundColor\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return NgxGravatarDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GravatarModule = /*#__PURE__*/(() => {\n  class GravatarModule {\n    static forRoot(gravatarConfig) {\n      return {\n        ngModule: GravatarModule,\n        providers: [{\n          provide: GRAVATAR_CONFIG_TOKEN,\n          useValue: gravatarConfig\n        }]\n      };\n    }\n\n  }\n\n  GravatarModule.ɵfac = function GravatarModule_Factory(t) {\n    return new (t || GravatarModule)();\n  };\n\n  GravatarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: GravatarModule\n  });\n  GravatarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return GravatarModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GravatarModule, {\n    declarations: [NgxGravatarDirective],\n    exports: [NgxGravatarDirective]\n  });\n})();\n/*\n * Public API Surface of ngx-gravatar\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FALLBACK, GravatarModule, NgxGravatarService, RATING, NgxGravatarDirective as ɵa, GRAVATAR_CONFIG_TOKEN as ɵb }; //# sourceMappingURL=ngx-gravatar.js.map","map":null,"metadata":{},"sourceType":"module"}